4+4
library(randomForest)
library(caret)
library(randomForest)
library(caret)
filelist_1 = list.files('HMP_Dataset/Brush_teeth/',pattern = '*.txt')
filelist_2 = list.files('HMP_Dataset/Climb_stairs/',pattern = '*.txt')
filelist_3 = list.files('HMP_Dataset/Comb_hair/',pattern = '*.txt')
filelist_4 = list.files('HMP_Dataset/Descend_stairs/',pattern = '*.txt')
filelist_5 = list.files('HMP_Dataset/Drink_glass/',pattern = '*.txt')
filelist_6 = list.files('HMP_Dataset/Eat_meat/',pattern = '*.txt')
filelist_7 = list.files('HMP_Dataset/Eat_soup/',pattern = '*.txt')
filelist_8 = list.files('HMP_Dataset/Getup_bed/',pattern = '*.txt')
filelist_9 = list.files('HMP_Dataset/Liedown_bed/',pattern = '*.txt')
filelist_10 = list.files('HMP_Dataset/Pour_water/',pattern = '*.txt')
filelist_11 = list.files('HMP_Dataset/Sitdown_chair/',pattern = '*.txt')
filelist_12 = list.files('HMP_Dataset/Standup_chair/',pattern = '*.txt')
filelist_13 = list.files('HMP_Dataset/Use_telephone/',pattern = '*.txt')
filelist_14 = list.files('HMP_Dataset/Walk/',pattern = '*.txt')
brush_teeth = lapply(paste('HMP_Dataset/Brush_teeth/',filelist_1,sep = '/'), function(x) read.table(x, header=FALSE))
climb_stairs = lapply(paste('HMP_Dataset/Climb_stairs/',filelist_2,sep = '/'), function(x) read.table(x, header=FALSE))
comb_hair = lapply(paste('HMP_Dataset/Comb_hair/',filelist_3,sep = '/'), function(x) read.table(x, header=FALSE))
descend_stairs = lapply(paste('HMP_Dataset/Descend_stairs/',filelist_4,sep = '/'), function(x) read.table(x, header=FALSE))
drink_glass = lapply(paste('HMP_Dataset/Drink_glass/',filelist_5,sep = '/'), function(x) read.table(x, header=FALSE))
eat_meat = lapply(paste('HMP_Dataset/Eat_meat/',filelist_6,sep = '/'), function(x) read.table(x, header=FALSE))
eat_soup = lapply(paste('HMP_Dataset/Eat_soup/',filelist_7,sep = '/'), function(x) read.table(x, header=FALSE))
getup_bed = lapply(paste('HMP_Dataset/Getup_bed/',filelist_8,sep = '/'), function(x) read.table(x, header=FALSE))
liedown_bed = lapply(paste('HMP_Dataset/Liedown_bed/',filelist_9,sep = '/'), function(x) read.table(x, header=FALSE))
pour_water = lapply(paste('HMP_Dataset/Pour_water/',filelist_10,sep = '/'), function(x) read.table(x, header=FALSE))
sitdown_chair = lapply(paste('HMP_Dataset/Sitdown_chair/',filelist_11,sep = '/'), function(x) read.table(x, header=FALSE))
standup_chair = lapply(paste('HMP_Dataset/Standup_chair/',filelist_12,sep = '/'), function(x) read.table(x, header=FALSE))
use_telephone = lapply(paste('HMP_Dataset/Use_telephone/',filelist_13,sep = '/'), function(x) read.table(x, header=FALSE))
walk = lapply(paste('HMP_Dataset/Walk/',filelist_14,sep = '/'), function(x) read.table(x, header=FALSE))
remove(filelist_1,filelist_2,filelist_3,filelist_4,filelist_5,filelist_6,filelist_7,filelist_8,filelist_9,filelist_10,filelist_11,filelist_12,filelist_13,filelist_14)
for(i in 1:length(brush_teeth)){
brush_teeth[[i]]$label = 1
}
for(i in 1:length(climb_stairs)){
climb_stairs[[i]]$label = 2
}
for(i in 1:length(comb_hair)){
comb_hair[[i]]$label = 3
}
for(i in 1:length(descend_stairs)){
descend_stairs[[i]]$label = 4
}
for(i in 1:length(drink_glass)){
drink_glass[[i]]$label = 5
}
for(i in 1:length(eat_meat)){
eat_meat[[i]]$label = 6
}
for(i in 1:length(eat_soup)){
eat_soup[[i]]$label = 7
}
for(i in 1:length(getup_bed)){
getup_bed[[i]]$label = 8
}
for(i in 1:length(liedown_bed)){
liedown_bed[[i]]$label = 9
}
for(i in 1:length(pour_water)){
pour_water[[i]]$label = 10
}
for(i in 1:length(sitdown_chair)){
sitdown_chair[[i]]$label = 11
}
for(i in 1:length(standup_chair)){
standup_chair[[i]]$label = 12
}
for(i in 1:length(use_telephone)){
use_telephone[[i]]$label = 13
}
for(i in 1:length(walk)){
walk[[i]]$label = 14
}
classes_list <- list()
classes_list[[1]] <- brush_teeth
classes_list[[2]] <- climb_stairs
classes_list[[3]] <- comb_hair
classes_list[[4]] <- descend_stairs
classes_list[[5]] <- drink_glass
classes_list[[6]] <- eat_meat
classes_list[[7]] <- eat_soup
classes_list[[8]] <- getup_bed
classes_list[[9]] <- liedown_bed
classes_list[[10]] <- pour_water
classes_list[[11]] <- sitdown_chair
classes_list[[12]] <- standup_chair
classes_list[[13]] <- use_telephone
classes_list[[14]] <- walk
trainData <- list()
testData <- list()
trainIndex <- 1
testIndex <- 1
for(i in 1:14)
{
curr_class <- classes_list[[i]]
total_elems <- length(curr_class)
test_size <- floor(0.2*total_elems)
test_size <- max(test_size, 1)
train_size <- total_elems - test_size
print(length(curr_class))
for(j in 1:length(curr_class))
{
if(j >= 1 && j <= train_size)
{
trainData[[trainIndex]] <- curr_class[[j]]
trainIndex <- trainIndex + 1
}
if(j > train_size && j <= total_elems)
{
testData[[testIndex]] <- curr_class[[j]]
testIndex <- testIndex + 1
}
}
}
cutSize <- 32
overlap <- 0
gap <- (cutSize-overlap)
num_cols <- (3*cutSize)
num_cols_with_label <- (3*cutSize) + 1
cutData <- function(trainData){
cuttedData <- numeric()
for(i in 1:length(trainData))
{
start <- 10
end <- (cutSize + start - 1)
chunkSize <- floor( (nrow(trainData[[i]]) - 10) / cutSize )
dataPoint <- trainData[[i]]
for(j in 1:chunkSize)
{
xyzData <- t(dataPoint[start:end,])
temp <- xyzData[1,]
temp <- c(temp, xyzData[2,])
temp <- c(temp, xyzData[3,])
cuttedData <- c(cuttedData, temp)
start <- start + gap
end <- end + gap
}
}
cuttedData <- matrix(cuttedData, ncol = num_cols, byrow = TRUE)
return (cuttedData)
}
cuttedTrainData <- cutData(trainData)
cuttedTestData <- cutData(testData)
#print(trainData[[1]])
print(dim(cuttedTrainData))
getDataLabels <- function(trainData)
{
trainLabels <- list()
for(i in 1:length(trainData))
{
dataPoint <- trainData[[i]]
trainLabels[[i]] <- dataPoint[1,4]
}
return (trainLabels)
}
train_labels <- getDataLabels(trainData)
test_labels <- getDataLabels(testData)
cluster_num <- 500
library(factoextra)
#kmeans_14 = kmeans(cuttedTrainData, centers = cluster_num)
kmeans_14 = hkmeans(cuttedTrainData, cluster_num)
cluster_vec <- kmeans_14$cluster
cluster_centers <- kmeans_14$centers
findNearestClusterIndex <- function(vec1, matrix1)
{
minIndex <- 1
minDistance <- norm(vec1-matrix1[1,], "2")
for(i in 2:nrow(matrix1))
{
currDistance <- norm(vec1-matrix1[i, ], "2")
if(currDistance < minDistance)
{
minIndex <- i
minDistance <- currDistance
}
}
return (minIndex)
}
vecQuantization <- function(trainData)
{
trainSize <- length(trainData)
cuttedDataPoints <- list()
for(index in 1:trainSize)
{
dataPoint <- list()
dataPoint[[1]] <- trainData[[index]]
cuttedOneTrainData <- cutData(dataPoint)
cuttedDataPoints[[index]] <- cuttedOneTrainData
}
hist_list <- list()
for(i in 1:length(cuttedDataPoints))
{
currDataPoint <- cuttedDataPoints[[i]]
hist_summary <- rep(0,cluster_num)
for(j in 1:nrow(currDataPoint))
{
clusterCenterIndex <- findNearestClusterIndex(currDataPoint[j,], cluster_centers)
hist_summary[clusterCenterIndex] <- hist_summary[clusterCenterIndex] + 1
}
count <- 0
for(j in 1:length(hist_summary))
{
count <- count + hist_summary[j]
}
hist_summary <- hist_summary / count
hist_list[[i]] <- hist_summary
}
return (hist_list)
}
train_hist <- vecQuantization(trainData)
temp <- as.vector(train_hist[[1]])
for(i in 2:length(train_hist))
{
temp <- c(temp, train_hist[[i]])
}
train_mat <- matrix(temp, ncol = cluster_num, byrow = TRUE)
train_mat_with_labels <- cbind(train_mat,as.vector(train_labels))
test_hist <- vecQuantization(testData)
tempt <- as.vector(test_hist[[1]])
for(i in 2:length(test_hist))
{
tempt <- c(tempt, test_hist[[i]])
}
test_mat <- matrix(tempt, ncol = cluster_num, byrow = TRUE)
test_mat_with_labels <- cbind(test_mat, as.vector(test_labels))
library("klaR")
model <- svmlight(train_mat, train_mat_with_labels[,501], pathsvm="svm_light")
#print(head(train_mat))
#print(train_mat_with_labels)
train_mat_with_labels = data.frame(matrix(unlist(train_mat_with_labels),ncol = cluster_num + 1 ,byrow = FALSE))
test_mat = data.frame(matrix(unlist(test_mat),ncol = cluster_num,byrow = FALSE))
train_mat = data.frame(matrix(unlist(train_mat),ncol = cluster_num,byrow = FALSE))
library("klaR")
model <- svmlight(train_mat, train_mat_with_labels[,501], pathsvm="svm_light")
matrix <- table(predict(model, test_mat)$class, test_labels)
#print(head(train_mat))
#print(train_mat_with_labels)
train_mat_with_labels = data.frame(matrix(unlist(train_mat_with_labels),ncol = cluster_num + 1 ,byrow = FALSE))
test_mat = data.frame(matrix(unlist(test_mat),ncol = cluster_num,byrow = FALSE))
train_mat = data.frame(matrix(unlist(train_mat),ncol = cluster_num,byrow = FALSE))
library(class)
train_knn = knn(train_mat, test_mat, cl =train_mat_with_labels$X501,k = 7)
print(train_knn)
print(unlist(train_labels))
train_labels <- unlist(train_labels)
test_labels <- unlist(test_labels)
print(table(train_knn, test_labels))
correct <- 0
wrong <- 0
for(i in 1:length(train_knn))
{
if(train_knn[i] == test_labels[i])
{
correct <- correct + 1
}
else
{
wrong <- wrong + 1
}
}
print(correct)
print(wrong)
print(correct / (correct + wrong))
library("klaR")
model <- svmlight(train_mat, train_mat_with_labels[,501], pathsvm="svm_light")
matrix <- table(predict(model, test_mat)$class, test_labels)
print(matrix)
print(sum(matrix))
correct <- sum(matrix)
#print(diag(matrix))
diag(matrix) <- 0
#print(matrix)
print(sum(matrix))
wrong <- sum(matrix)
print(correct/(correct+wrong))
getwd()
setwd("/Users/yuxigu/CS498/HW5")
getwd()
setwd("/Users/yuxigu/Desk")
setwd("/Users/yuxigu/Desktop/CS498/HW7")
getwd()
